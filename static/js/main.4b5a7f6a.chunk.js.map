{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredrobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GACb,IADcC,EACf,EADeA,KAAKC,EACpB,EADoBA,MAAMC,EAC1B,EAD0BA,GAExB,OACE,yBAAKC,UAAU,sDACb,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAA1B,mBACnB,6BACA,4BAAKF,GACL,2BAAIC,MCaKK,EAnBE,SAAC,GACjB,IADkBC,EACnB,EADmBA,OAEXC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACrC,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KACjBC,MAAOM,EAAOI,GAAGV,WAInB,OACE,6BACGO,ICNQK,EATG,SAAC,GACnB,EADoBC,YACnB,IAD+BC,EAChC,EADgCA,aAE9B,OACE,yBAAKZ,UAAU,OACf,2BAAOA,UAAU,wCAAwCa,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCIlGI,G,MARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAS,SAAWC,OAAO,kBAAmBC,OAAO,UAClEJ,EAAMK,YCiBIC,E,kDAnBb,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAQ,CACXC,UAAS,GAHK,E,8DAOAC,EAAMC,GACtBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACL,wEAEFG,KAAKX,MAAMK,a,GAhBMQ,aC8CbC,E,kDAtCb,aACC,IAAD,8BACE,gBAcFC,eAAe,SAACC,GACd,EAAKJ,SAAS,CAAClB,YAAYsB,EAAMC,OAAOC,SAdxC,EAAKX,MAAM,CACTpB,OAAO,GACPO,YAAY,IAJhB,E,gEAQkB,IAAD,OACjByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACzB,OAAOoC,S,+BAQlC,IAAD,OACQC,EAAiBb,KAAKJ,MAAMpB,OAAOsC,QAAO,SAAAC,GAC9C,OAAOA,EAAM9C,KAAK+C,cAAcC,SAAS,EAAKrB,MAAMb,YAAYiC,kBAEhE,OACA,yBAAK5C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,OAAQqC,W,GAhCZX,aCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.4b5a7f6a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) =>\r\n{\r\n  return(\r\n    <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt=\"cats\" src={`https://robohash.org/${id}?size=200x200`}/>\r\n      <div>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>\r\n{\r\n  const cardComponent = robots.map((user,i) => {\r\n    return (\r\n     <Card\r\n     key={i}\r\n     id={robots[i].id}\r\n     name={robots[i].name}\r\n    email={robots[i].email}\r\n    />\r\n  );\r\n  })\r\n  return(\r\n    <div>\r\n      {cardComponent}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>\r\n{\r\n  return(\r\n    <div className='pa2'>\r\n    <input className='pa3 ba b--green bg-lightest-blue grow' type='search' placeholder='search robots' onChange={searchChange}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow:'scroll' , border:'5px solid black', height:'400px'}}>\r\n    {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React , {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError:false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error,info){\r\n    this.setState({hasError:true});\r\n  }\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n      return <h1>Hmmmm. Looks like something is wrong :/ </h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React ,{Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport {robots} from '../Components/robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\n\r\nclass App extends Component\r\n{\r\n  constructor()\r\n  {\r\n    super()\r\n    this.state={\r\n      robots:[],\r\n      searchfield:''\r\n    }\r\n  }\r\n\r\ncomponentDidMount(){\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response=>response.json())\r\n  .then(users=>this.setState({robots:users})\r\n  )\r\n}\r\n\r\n  onSearchChange=(event)=>{\r\n    this.setState({searchfield:event.target.value})\r\n  }\r\n  render()\r\n  {\r\n    const filteredrobots = this.state.robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n      return(\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={filteredrobots}/>\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}